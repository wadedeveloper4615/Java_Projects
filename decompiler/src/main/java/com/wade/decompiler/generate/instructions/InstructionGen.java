package com.wade.decompiler.generate.instructions;

import com.wade.decompiler.classfile.instructions.*;
import com.wade.decompiler.classfile.instructions.base.Instruction;

public class InstructionGen {
    public static InstructionGen read(Instruction instr) {
        InstructionGen instrgen = switch (instr.getOpcode()) {
            case AALOAD -> new ArrayLoadGen((AALOAD) instr);
            case AASTORE -> new ArrayStoreGen((AASTORE) instr);
            case ACONST_NULL -> new ConstGen((ACONST_NULL) instr);
            case ALOAD -> new LoadGen((ALOAD) instr);
            case ALOAD_0 -> new LoadGen((ALOAD) instr);
            case ALOAD_1 -> new LoadGen((ALOAD) instr);
            case ALOAD_2 -> new LoadGen((ALOAD) instr);
            case ALOAD_3 -> new LoadGen((ALOAD) instr);
            case ANEWARRAY -> new NewGen((ANEWARRAY) instr);
            case ARETURN -> new ReturnGen((ARETURN) instr);
            case ARRAYLENGTH -> new ArrayLengthGen((ARRAYLENGTH) instr);
            case ASTORE -> new StoreGen((ASTORE) instr);
            case ASTORE_0 -> new StoreGen((ASTORE) instr);
            case ASTORE_1 -> new StoreGen((ASTORE) instr);
            case ASTORE_2 -> new StoreGen((ASTORE) instr);
            case ASTORE_3 -> new StoreGen((ASTORE) instr);
            case ATHROW -> new AThrowGen((ATHROW) instr);
            case BALOAD -> new ArrayLoadGen((BALOAD) instr);
            case BASTORE -> new ArrayStoreGen((BASTORE) instr);
            case BIPUSH -> new ConstGen((BIPUSH) instr);
            case BREAKPOINT -> new BreakPointGen((BREAKPOINT) instr);
            case CALOAD -> new ArrayLoadGen((CALOAD) instr);
            case CASTORE -> new ArrayStoreGen((CASTORE) instr);
            case CHECKCAST -> new CheckCastGen((CHECKCAST) instr);
            case D2F -> new ConversionGen((D2F) instr);
            case D2I -> new ConversionGen((D2I) instr);
            case D2L -> new ConversionGen((D2L) instr);
            case DADD -> new AddGen((DADD) instr);
            case DALOAD -> new ArrayLoadGen((DALOAD) instr);
            case DASTORE -> new ArrayStoreGen((DASTORE) instr);
            case DCMPG -> new CompareGen((DCMPG) instr);
            case DCMPL -> new CompareGen((DCMPL) instr);
            case DCONST_0 -> new ConstGen((DCONST) instr);
            case DCONST_1 -> new ConstGen((DCONST) instr);
            case DDIV -> new DivGen((DDIV) instr);
            case DLOAD -> new LoadGen((DLOAD) instr);
            case DLOAD_0 -> new LoadGen((DLOAD) instr);
            case DLOAD_1 -> new LoadGen((DLOAD) instr);
            case DLOAD_2 -> new LoadGen((DLOAD) instr);
            case DLOAD_3 -> new LoadGen((DLOAD) instr);
            case DMUL -> new MulGen((DMUL) instr);
            case DNEG -> new NegGen((DNEG) instr);
            case DREM -> new RemGen((DREM) instr);
            case DRETURN -> new ReturnGen((DRETURN) instr);
            case DSTORE -> new StoreGen((DSTORE) instr);
            case DSTORE_0 -> new StoreGen((DSTORE) instr);
            case DSTORE_1 -> new StoreGen((DSTORE) instr);
            case DSTORE_2 -> new StoreGen((DSTORE) instr);
            case DSTORE_3 -> new StoreGen((DSTORE) instr);
            case DSUB -> new SubGen((DSUB) instr);
            case DUP_X1 -> new DuplicateGen((DUP_X1) instr);
            case DUP_X2 -> new DuplicateGen((DUP_X2) instr);
            case DUP -> new DuplicateGen((DUP) instr);
            case DUP2_X1 -> new DuplicateGen((DUP2_X1) instr);
            case DUP2_X2 -> new DuplicateGen((DUP2_X2) instr);
            case DUP2 -> new DuplicateGen((DUP2) instr);
            case F2D -> new ConversionGen((F2D) instr);
            case F2I -> new ConversionGen((F2I) instr);
            case F2L -> new ConversionGen((F2L) instr);
            case FADD -> new AddGen((FADD) instr);
            case FALOAD -> new ArrayLoadGen((FALOAD) instr);
            case FASTORE -> new ArrayStoreGen((FASTORE) instr);
            case FCMPG -> new CompareGen((FCMPG) instr);
            case FCMPL -> new CompareGen((FCMPG) instr);
            case FCONST_0 -> new ConstGen((FCONST) instr);
            case FCONST_1 -> new ConstGen((FCONST) instr);
            case FCONST_2 -> new ConstGen((FCONST) instr);
            case FDIV -> new DivGen((FDIV) instr);
            case FLOAD -> new LoadGen((FLOAD) instr);
            case FLOAD_0 -> new LoadGen((FLOAD) instr);
            case FLOAD_1 -> new LoadGen((FLOAD) instr);
            case FLOAD_2 -> new LoadGen((FLOAD) instr);
            case FLOAD_3 -> new LoadGen((FLOAD) instr);
            case FMUL -> new MulGen((FMUL) instr);
            case FNEG -> new NegGen((FNEG) instr);
            case FREM -> new RemGen((FREM) instr);
            case FRETURN -> new ReturnGen((FRETURN) instr);
            case FSTORE -> new StoreGen((FSTORE) instr);
            case FSTORE_0 -> new StoreGen((FSTORE) instr);
            case FSTORE_1 -> new StoreGen((FSTORE) instr);
            case FSTORE_2 -> new StoreGen((FSTORE) instr);
            case FSTORE_3 -> new StoreGen((FSTORE) instr);
            case FSUB -> new SubGen((FSUB) instr);
            case GETFIELD -> new GetFieldGen((GETFIELD) instr);
            case GETSTATIC -> new GetFieldGen((GETSTATIC) instr);
            case GOTO_W -> new GotoGen((GOTO_W) instr);
            case GOTO -> new GotoGen((GOTO) instr);
            case I2B -> new ConversionGen((I2B) instr);
            case I2C -> new ConversionGen((I2C) instr);
            case I2D -> new ConversionGen((I2D) instr);
            case I2F -> new ConversionGen((I2F) instr);
            case I2L -> new ConversionGen((I2L) instr);
            case I2S -> new ConversionGen((I2S) instr);
            case IADD -> new AddGen((IADD) instr);
            case IALOAD -> new ArrayLoadGen((IALOAD) instr);
            case IAND -> new AndGen((IAND) instr);
            case IASTORE -> new ArrayStoreGen((IASTORE) instr);
            case ICONST_M1 -> new ConstGen((ICONST) instr);
            case ICONST_0 -> new ConstGen((ICONST) instr);
            case ICONST_1 -> new ConstGen((ICONST) instr);
            case ICONST_2 -> new ConstGen((ICONST) instr);
            case ICONST_3 -> new ConstGen((ICONST) instr);
            case ICONST_4 -> new ConstGen((ICONST) instr);
            case ICONST_5 -> new ConstGen((ICONST) instr);
            case IDIV -> new DivGen((IDIV) instr);
            case IF_ACMPEQ -> new CompareGen((IF_ACMPEQ) instr);
            case IF_ACMPNE -> new CompareGen((IF_ACMPNE) instr);
            case IF_ICMPEQ -> new CompareGen((IF_ICMPEQ) instr);
            case IF_ICMPGE -> new CompareGen((IF_ICMPGE) instr);
            case IF_ICMPGT -> new CompareGen((IF_ICMPGT) instr);
            case IF_ICMPLE -> new CompareGen((IF_ICMPLE) instr);
            case IF_ICMPLT -> new CompareGen((IF_ICMPLT) instr);
            case IF_ICMPNE -> new CompareGen((IF_ICMPNE) instr);
            case IFEQ -> new CompareGen((IFEQ) instr);
            case IFGE -> new CompareGen((IFGE) instr);
            case IFGT -> new CompareGen((IFGT) instr);
            case IFLE -> new CompareGen((IFLE) instr);
            case IFLT -> new CompareGen((IFLT) instr);
            case IFNE -> new CompareGen((IFNE) instr);
            case IFNULL -> new CompareGen((IFNULL) instr);
            case IFNONNULL -> new CompareGen((IFNONNULL) instr);
            case IINC -> new IncGen((IINC) instr);
            case ILOAD -> new LoadGen((ILOAD) instr);
            case ILOAD_0 -> new LoadGen((ILOAD) instr);
            case ILOAD_1 -> new LoadGen((ILOAD) instr);
            case ILOAD_2 -> new LoadGen((ILOAD) instr);
            case ILOAD_3 -> new LoadGen((ILOAD) instr);
            case IMPDEP1 -> new ImpDepGen((IMPDEP1) instr);
            case IMPDEP2 -> new ImpDepGen((IMPDEP2) instr);
            case IMUL -> new MulGen((IMUL) instr);
            case INEG -> new NegGen((INEG) instr);
            case INSTANCEOF -> new InstanceOfGen((INSTANCEOF) instr);
            case INVOKEDYNAMIC -> new InvokeGen((INVOKEDYNAMIC) instr);
            case INVOKEINTERFACE -> new InvokeGen((INVOKEINTERFACE) instr);
            case INVOKESPECIAL -> new InvokeGen((INVOKESPECIAL) instr);
            case INVOKESTATIC -> new InvokeGen((INVOKESTATIC) instr);
            case INVOKEVIRTUAL -> new InvokeGen((INVOKEVIRTUAL) instr);
            case IOR -> new OrGen((IOR) instr);
            case IREM -> new RemGen((IREM) instr);
            case IRETURN -> new ReturnGen((IRETURN) instr);
            case ISHL -> new ShiftGen((ISHL) instr);
            case ISHR -> new ShiftGen((ISHR) instr);
            case ISTORE -> new StoreGen((ISTORE) instr);
            case ISTORE_0 -> new StoreGen((ISTORE) instr);
            case ISTORE_1 -> new StoreGen((ISTORE) instr);
            case ISTORE_2 -> new StoreGen((ISTORE) instr);
            case ISTORE_3 -> new StoreGen((ISTORE) instr);
            case ISUB -> new SubGen((ISUB) instr);
            case IUSHR -> new ShiftGen((IUSHR) instr);
            case IXOR -> new XOrGen((IXOR) instr);
            case JSR_W -> new JsrGen((JSR_W) instr);
            case JSR -> new JsrGen((JSR) instr);
            case L2D -> new ConversionGen((L2D) instr);
            case L2F -> new ConversionGen((L2F) instr);
            case L2I -> new ConversionGen((L2I) instr);
            case LADD -> new AddGen((LADD) instr);
            case LALOAD -> new ArrayLoadGen((LALOAD) instr);
            case LAND -> new AndGen((LAND) instr);
            case LASTORE -> new ArrayStoreGen((LASTORE) instr);
            case LCMP -> new CompareGen((LCMP) instr);
            case LCONST_0 -> new ConstGen((LCONST) instr);
            case LCONST_1 -> new ConstGen((LCONST) instr);
            case LDC_W -> new ConstGen((LDC_W) instr);
            case LDC -> new ConstGen((LDC) instr);
            case LDC2_W -> new ConstGen((LDC2_W) instr);
            case LDIV -> new DivGen((LDIV) instr);
            case LLOAD -> new LoadGen((LLOAD) instr);
            case LLOAD_0 -> new LoadGen((LLOAD) instr);
            case LLOAD_1 -> new LoadGen((LLOAD) instr);
            case LLOAD_2 -> new LoadGen((LLOAD) instr);
            case LLOAD_3 -> new LoadGen((LLOAD) instr);
            case LMUL -> new MulGen((LMUL) instr);
            case LNEG -> new NegGen((LNEG) instr);
            case LOOKUPSWITCH -> new LookupSwitchGen((LOOKUPSWITCH) instr);
            case LOR -> new OrGen((LOR) instr);
            case LREM -> new RemGen((LREM) instr);
            case LRETURN -> new ReturnGen((LRETURN) instr);
            case LSHL -> new ShiftGen((LSHL) instr);
            case LSHR -> new ShiftGen((LSHR) instr);
            case LSTORE -> new StoreGen((LSTORE) instr);
            case LSTORE_0 -> new StoreGen((LSTORE) instr);
            case LSTORE_1 -> new StoreGen((LSTORE) instr);
            case LSTORE_2 -> new StoreGen((LSTORE) instr);
            case LSTORE_3 -> new StoreGen((LSTORE) instr);
            case LSUB -> new SubGen((LSUB) instr);
            case LUSHR -> new ShiftGen((LUSHR) instr);
            case LXOR -> new XOrGen((LXOR) instr);
            case MONITORENTER -> new MonitorGen((MONITORENTER) instr);
            case MONITOREXIT -> new MonitorGen((MONITOREXIT) instr);
            case MULTIANEWARRAY -> new NewGen((MULTIANEWARRAY) instr);
            case NEW -> new NewGen((NEW) instr);
            case NEWARRAY -> new NewGen((NEWARRAY) instr);
            case NOP -> new NopGen((NOP) instr);
            case POP -> new PopGen((POP) instr);
            case POP2 -> new PopGen((POP2) instr);
            case PUTFIELD -> new PutFieldGen((PUTFIELD) instr);
            case PUTSTATIC -> new PutFieldGen((PUTSTATIC) instr);
            case RET -> new ReturnGen((RET) instr);
            case RETURN -> new ReturnGen((RETURN) instr);
            case SALOAD -> new ArrayLoadGen((SALOAD) instr);
            case SASTORE -> new ArrayStoreGen((SASTORE) instr);
            case SIPUSH -> new ConstGen((SIPUSH) instr);
            case SWAP -> new SwapGen((SWAP) instr);
            case TABLESWITCH -> new TableSwitchGen((TABLESWITCH) instr);
            default -> {
                System.out.println(instr);
                yield null;
            }
        };
        return instrgen;
    }
}
