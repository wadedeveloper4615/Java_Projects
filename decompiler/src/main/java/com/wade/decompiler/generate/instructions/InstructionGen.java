package com.wade.decompiler.generate.instructions;

import com.wade.decompiler.classfile.instructions.AALOAD;
import com.wade.decompiler.classfile.instructions.AASTORE;
import com.wade.decompiler.classfile.instructions.ALOAD;
import com.wade.decompiler.classfile.instructions.ANEWARRAY;
import com.wade.decompiler.classfile.instructions.ARETURN;
import com.wade.decompiler.classfile.instructions.ARRAYLENGTH;
import com.wade.decompiler.classfile.instructions.ASTORE;
import com.wade.decompiler.classfile.instructions.BIPUSH;
import com.wade.decompiler.classfile.instructions.CALOAD;
import com.wade.decompiler.classfile.instructions.CASTORE;
import com.wade.decompiler.classfile.instructions.CHECKCAST;
import com.wade.decompiler.classfile.instructions.DADD;
import com.wade.decompiler.classfile.instructions.DALOAD;
import com.wade.decompiler.classfile.instructions.DASTORE;
import com.wade.decompiler.classfile.instructions.DLOAD;
import com.wade.decompiler.classfile.instructions.DSTORE;
import com.wade.decompiler.classfile.instructions.DUP;
import com.wade.decompiler.classfile.instructions.FADD;
import com.wade.decompiler.classfile.instructions.FALOAD;
import com.wade.decompiler.classfile.instructions.FASTORE;
import com.wade.decompiler.classfile.instructions.FCONST;
import com.wade.decompiler.classfile.instructions.FLOAD;
import com.wade.decompiler.classfile.instructions.FSTORE;
import com.wade.decompiler.classfile.instructions.GETFIELD;
import com.wade.decompiler.classfile.instructions.GETSTATIC;
import com.wade.decompiler.classfile.instructions.I2B;
import com.wade.decompiler.classfile.instructions.I2C;
import com.wade.decompiler.classfile.instructions.I2S;
import com.wade.decompiler.classfile.instructions.IADD;
import com.wade.decompiler.classfile.instructions.IALOAD;
import com.wade.decompiler.classfile.instructions.IASTORE;
import com.wade.decompiler.classfile.instructions.ICONST;
import com.wade.decompiler.classfile.instructions.ILOAD;
import com.wade.decompiler.classfile.instructions.INVOKESPECIAL;
import com.wade.decompiler.classfile.instructions.INVOKESTATIC;
import com.wade.decompiler.classfile.instructions.IRETURN;
import com.wade.decompiler.classfile.instructions.ISTORE;
import com.wade.decompiler.classfile.instructions.LADD;
import com.wade.decompiler.classfile.instructions.LALOAD;
import com.wade.decompiler.classfile.instructions.LASTORE;
import com.wade.decompiler.classfile.instructions.LDC;
import com.wade.decompiler.classfile.instructions.LDC2_W;
import com.wade.decompiler.classfile.instructions.LLOAD;
import com.wade.decompiler.classfile.instructions.LSTORE;
import com.wade.decompiler.classfile.instructions.NEW;
import com.wade.decompiler.classfile.instructions.PUTFIELD;
import com.wade.decompiler.classfile.instructions.PUTSTATIC;
import com.wade.decompiler.classfile.instructions.RETURN;
import com.wade.decompiler.classfile.instructions.SALOAD;
import com.wade.decompiler.classfile.instructions.SASTORE;
import com.wade.decompiler.classfile.instructions.SIPUSH;
import com.wade.decompiler.classfile.instructions.base.Instruction;

public class InstructionGen {
    public static InstructionGen read(Instruction instr) {
        InstructionGen instrgen = switch (instr.getOpcode()) {
            case ALOAD -> new LoadGen((ALOAD) instr);
            case ALOAD_0 -> new LoadGen((ALOAD) instr);
            case ALOAD_1 -> new LoadGen((ALOAD) instr);
            case ALOAD_2 -> new LoadGen((ALOAD) instr);
            case ALOAD_3 -> new LoadGen((ALOAD) instr);
            case ASTORE -> new LoadGen((ALOAD) instr);
            case ASTORE_0 -> new StoreGen((ASTORE) instr);
            case ASTORE_1 -> new StoreGen((ASTORE) instr);
            case ASTORE_2 -> new StoreGen((ASTORE) instr);
            case ASTORE_3 -> new StoreGen((ASTORE) instr);
            case INVOKESPECIAL -> new InvokeGen((INVOKESPECIAL) instr);
            case INVOKESTATIC -> new InvokeGen((INVOKESTATIC) instr);
            case ILOAD -> new LoadGen((ILOAD) instr);
            case ILOAD_0 -> new LoadGen((ILOAD) instr);
            case ILOAD_1 -> new LoadGen((ILOAD) instr);
            case ILOAD_2 -> new LoadGen((ILOAD) instr);
            case ILOAD_3 -> new LoadGen((ILOAD) instr);
            case RETURN -> new ReturnGen((RETURN) instr);
            case IRETURN -> new ReturnGen((IRETURN) instr);
            case ARETURN -> new ReturnGen((ARETURN) instr);
            case PUTFIELD -> new PutFieldGen((PUTFIELD) instr);
            case GETFIELD -> new GetFieldGen((GETFIELD) instr);
            case ICONST_M1 -> new ConstGen((ICONST) instr);
            case ICONST_0 -> new ConstGen((ICONST) instr);
            case ICONST_1 -> new ConstGen((ICONST) instr);
            case ICONST_2 -> new ConstGen((ICONST) instr);
            case ICONST_3 -> new ConstGen((ICONST) instr);
            case ICONST_4 -> new ConstGen((ICONST) instr);
            case ICONST_5 -> new ConstGen((ICONST) instr);
            case ISTORE_0 -> new StoreGen((ISTORE) instr);
            case ISTORE_1 -> new StoreGen((ISTORE) instr);
            case ISTORE_2 -> new StoreGen((ISTORE) instr);
            case ISTORE_3 -> new StoreGen((ISTORE) instr);
            case IADD -> new AddGen((IADD) instr);
            case FADD -> new AddGen((FADD) instr);
            case DADD -> new AddGen((DADD) instr);
            case LLOAD -> new LoadGen((LLOAD) instr);
            case LLOAD_0 -> new LoadGen((LLOAD) instr);
            case LLOAD_1 -> new LoadGen((LLOAD) instr);
            case LLOAD_2 -> new LoadGen((LLOAD) instr);
            case LLOAD_3 -> new LoadGen((LLOAD) instr);
            case I2C -> new ConversionGen((I2C) instr);
            case I2B -> new ConversionGen((I2B) instr);
            case I2S -> new ConversionGen((I2S) instr);
            case LADD -> new AddGen((LADD) instr);
            case LDC2_W -> new ConstGen((LDC2_W) instr);
            case FSTORE -> new StoreGen((FSTORE) instr);
            case FSTORE_0 -> new StoreGen((FSTORE) instr);
            case FSTORE_1 -> new StoreGen((FSTORE) instr);
            case FSTORE_2 -> new StoreGen((FSTORE) instr);
            case FSTORE_3 -> new StoreGen((FSTORE) instr);
            case DSTORE -> new StoreGen((DSTORE) instr);
            case DSTORE_0 -> new StoreGen((DSTORE) instr);
            case DSTORE_1 -> new StoreGen((DSTORE) instr);
            case DSTORE_2 -> new StoreGen((DSTORE) instr);
            case DSTORE_3 -> new StoreGen((DSTORE) instr);
            case FLOAD -> new LoadGen((FLOAD) instr);
            case FLOAD_0 -> new LoadGen((FLOAD) instr);
            case FLOAD_1 -> new LoadGen((FLOAD) instr);
            case FLOAD_2 -> new LoadGen((FLOAD) instr);
            case FLOAD_3 -> new LoadGen((FLOAD) instr);
            case LSTORE -> new StoreGen((LSTORE) instr);
            case LSTORE_0 -> new StoreGen((LSTORE) instr);
            case LSTORE_1 -> new StoreGen((LSTORE) instr);
            case LSTORE_2 -> new StoreGen((LSTORE) instr);
            case LSTORE_3 -> new StoreGen((LSTORE) instr);
            case FCONST_0 -> new ConstGen((FCONST) instr);
            case FCONST_1 -> new ConstGen((FCONST) instr);
            case FCONST_2 -> new ConstGen((FCONST) instr);
            case DLOAD -> new LoadGen((DLOAD) instr);
            case DLOAD_0 -> new LoadGen((DLOAD) instr);
            case DLOAD_1 -> new LoadGen((DLOAD) instr);
            case DLOAD_2 -> new LoadGen((DLOAD) instr);
            case DLOAD_3 -> new LoadGen((DLOAD) instr);
            case AALOAD -> new ArrayLoadGen((AALOAD) instr);
            case CALOAD -> new ArrayLoadGen((CALOAD) instr);
            case DALOAD -> new ArrayLoadGen((DALOAD) instr);
            case FALOAD -> new ArrayLoadGen((FALOAD) instr);
            case IALOAD -> new ArrayLoadGen((IALOAD) instr);
            case LALOAD -> new ArrayLoadGen((LALOAD) instr);
            case SALOAD -> new ArrayLoadGen((SALOAD) instr);
            case AASTORE -> new ArrayStoreGen((AASTORE) instr);
            case CASTORE -> new ArrayStoreGen((CASTORE) instr);
            case DASTORE -> new ArrayStoreGen((DASTORE) instr);
            case FASTORE -> new ArrayStoreGen((FASTORE) instr);
            case IASTORE -> new ArrayStoreGen((IASTORE) instr);
            case LASTORE -> new ArrayStoreGen((LASTORE) instr);
            case SASTORE -> new ArrayStoreGen((SASTORE) instr);
            case PUTSTATIC -> new PutFieldGen((PUTSTATIC) instr);
            case GETSTATIC -> new GetFieldGen((GETSTATIC) instr);
            case DUP -> new Duplicate((DUP) instr);
            case LDC -> new ConstGen((LDC) instr);
            case NEW -> new NewGen((NEW) instr);
            case ANEWARRAY -> new NewGen((ANEWARRAY) instr);
            case ARRAYLENGTH -> new ArrayLengthGen((ARRAYLENGTH) instr);
            case CHECKCAST -> new CheckCastGen((CHECKCAST) instr);
            case BIPUSH -> new ConstGen((BIPUSH) instr);
            case SIPUSH -> new ConstGen((SIPUSH) instr);
            default -> {
                System.out.println(instr);
                yield null;
            }
        };
        return instrgen;
    }
}
